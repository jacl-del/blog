/**
 *    author:  jacl
 *    created: 2.6.2023
 **/
 #include<iostream>
#include<vector>
using namespace std;
const int N = 2e5 + 10;
int dp[N];
int id[N];
vector<pair<int, int>>a[N];
void dfs(int u)
{
    for (auto it : a[u]) {
        if (dp[it.first] == 0) {
            dp[it.first] = dp[u] + (it.second <= id[u]);
            id[it.first] = it.second;
            dfs(it.first);
        }
    }
}
void solve()
{
    int n;
    cin >> n;
    for (int i = 0; i <= n; i++) dp[i] = 0, id[i] = 0, a[i].clear();
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        a[u].push_back({ v,i });
        a[v].push_back({ u,i });
    }
    int ans = 0;
    dp[1] = 1;
    dfs(1);
    for (int i = 1; i <= n; i++) ans = max(ans, dp[i]);
    cout << ans << "\n";
}
int main()
{
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    retrun 0;
}
